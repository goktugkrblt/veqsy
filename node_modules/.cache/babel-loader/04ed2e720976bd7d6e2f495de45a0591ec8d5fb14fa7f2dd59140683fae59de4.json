{"ast":null,"code":"var _jsxFileName = \"/Users/goktugkarabulut/Documents/veqsy/src/components/note-app.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport RightBar from \"./right-bar\";\nimport LogoSvg from \"./svg/logo\";\nimport ThrashSvg from \"./svg/trash\";\nimport Footer from \"./footer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteApp = () => {\n  _s();\n  const [currentDateTime, setCurrentDateTime] = useState(new Date());\n  const [notes, setNotes] = useState([]);\n  const [selectedDataId, setSelectedDataId] = useState(null);\n  const [textAlignment, setTextAlignment] = useState(\"left\");\n  const [textColor, setTextColor] = useState(\"#dcdcdd\");\n  const [fontSize, setFontSize] = useState(\"Medium\");\n  const [isTextBold, setIsTextBold] = useState(false);\n  const [isTextItalic, setIsTextItalic] = useState(false);\n  const [isTextUnderline, setIsTextUnderline] = useState(false);\n  const [nextDataId, setNextDataId] = useState(1);\n  const noteInputRef = useRef(null);\n  useEffect(() => {\n    const storedNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n    setNotes(storedNotes);\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n  const handleNewNoteClick = () => {\n    const newNoteContent = noteInputRef.current.value.trim();\n    if (newNoteContent !== \"\") {\n      const truncatedContent = truncateAndAddEllipsis(newNoteContent);\n      const newNote = {\n        id: Date.now(),\n        content: truncatedContent,\n        dataId: nextDataId\n      };\n      setNotes([newNote, ...notes]);\n      setSelectedDataId(newNote.dataId);\n      localStorage.setItem(\"notes\", JSON.stringify([newNote, ...notes]));\n      noteInputRef.current.setAttribute(\"data-id\", newNote.dataId);\n      setNextDataId(nextDataId + 1);\n      noteInputRef.current.value = \"\";\n    }\n  };\n  const truncateAndAddEllipsis = (content, maxLength = 25) => {\n    if (content.length <= maxLength) {\n      return content;\n    } else {\n      return content.slice(0, maxLength - 3) + \"...\";\n    }\n  };\n  const handleDivClick = (dataId, event) => {\n    if (event && event.target && event.target.classList.contains(\"trash-btn\")) {\n      handleDeleteNote(dataId);\n    } else {\n      setSelectedDataId(dataId);\n      setNoteContent(dataId);\n    }\n  };\n  const handleDeleteNote = dataId => {\n    const updatedNotes = notes.filter(note => note.dataId !== dataId);\n    setNotes(updatedNotes);\n    if (selectedDataId === dataId || updatedNotes.length === 1) {\n      const newSelectedDataId = updatedNotes.length > 0 ? updatedNotes[0].dataId : null;\n      setSelectedDataId(newSelectedDataId);\n      setNoteContent(newSelectedDataId);\n      console.log(\"Deleted DataId:\", dataId);\n      console.log(\"Selected DataId After Deletion:\", newSelectedDataId);\n      noteInputRef.current.value = \"\";\n    }\n  };\n  const setNoteContent = dataId => {\n    const selectedNote = notes.find(note => note.dataId === dataId);\n    if (selectedNote) {\n      noteInputRef.current.value = selectedNote.content;\n    } else {\n      // Eğer not bulunamazsa, içeriği sıfırla\n      noteInputRef.current.value = \"\";\n    }\n  };\n  const formattedDateTime = () => {\n    const day = currentDateTime.getDate();\n    const month = formatMonth(currentDateTime.getMonth());\n    const year = currentDateTime.getFullYear();\n    const hours = currentDateTime.getHours().toString().padStart(2, \"0\");\n    const minutes = currentDateTime.getMinutes().toString().padStart(2, \"0\");\n    return `${day} ${month} ${year} ${hours}:${minutes}`;\n  };\n  const formatMonth = month => {\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    return monthNames[month];\n  };\n  const handleTextAlignmentChange = alignment => {\n    setTextAlignment(alignment);\n  };\n  const handleFontSizeChange = size => {\n    setFontSize(size);\n  };\n  const handleChecklistChange = checklistContent => {\n    if (selectedDataId !== null) {\n      const updatedNotes = [...notes];\n      const selectedNoteIndex = updatedNotes.findIndex(note => note.dataId === selectedDataId);\n      if (selectedNoteIndex !== -1) {\n        updatedNotes[selectedNoteIndex].content = checklistContent;\n        setNotes(updatedNotes);\n      }\n    }\n    setNoteContent(selectedDataId);\n  };\n  const handleDownloadPDF = () => {\n    const noteContent = noteInputRef.current.value;\n    copyToClipboard(noteContent);\n    downloadPDF(noteContent, 'note.pdf');\n  };\n  const handleTextBoldToggle = () => {\n    setIsTextBold(!isTextBold);\n  };\n  const handleTextItalicToggle = () => {\n    setIsTextItalic(!isTextItalic);\n  };\n  const handleTextUnderlineToggle = () => {\n    setIsTextUnderline(!isTextUnderline);\n  };\n  const copyToClipboard = async text => {\n    try {\n      await navigator.clipboard.writeText(text);\n      console.log('Text copied to clipboard');\n    } catch (err) {\n      console.error('Unable to copy text to clipboard', err);\n    }\n  };\n  const downloadPDF = (content, fileName) => {\n    const htmlContent = `<html><body><pre>${content}</pre></body></html>`;\n    const blob = new Blob([htmlContent], {\n      type: 'application/pdf'\n    });\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(blob);\n    link.download = fileName;\n    link.click();\n    URL.revokeObjectURL(link.href);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note-app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"veqsy_logo\",\n        children: /*#__PURE__*/_jsxDEV(LogoSvg, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"new-note-btn\",\n        onClick: handleNewNoteClick,\n        children: \"New Note\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), notes.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"notes-container\",\n        children: notes.map(prevNote => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: `previous-note ${prevNote.dataId === selectedDataId ? \"selected\" : \"\"}`,\n          \"data-id\": prevNote.dataId // Set data-id for the previous-note div\n          ,\n          onClick: () => handleDivClick(prevNote.dataId),\n          children: [prevNote.content, /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"trash-btn\",\n            onClick: () => handleDeleteNote(prevNote.dataId),\n            children: /*#__PURE__*/_jsxDEV(ThrashSvg, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 7\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 5\n          }, this)]\n        }, prevNote.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 3\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-date-time-container\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: formattedDateTime()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RightBar, {\n        textAlignment: textAlignment,\n        onTextAlignmentChange: handleTextAlignmentChange,\n        onColorChange: setTextColor,\n        onFontSizeChange: handleFontSizeChange,\n        onChecklistChange: handleChecklistChange,\n        onDownloadPDF: handleDownloadPDF,\n        onTextBoldToggle: handleTextBoldToggle,\n        onTextItalicToggle: handleTextItalicToggle,\n        onTextUnderlineToggle: handleTextUnderlineToggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note-input-container\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          ref: noteInputRef,\n          \"data-id\": selectedDataId // Set data-id for the textarea\n          ,\n          style: {\n            resize: \"none\",\n            textAlign: textAlignment,\n            color: textColor,\n            fontSize: fontSize,\n            fontWeight: isTextBold ? \"bold\" : \"normal\",\n            fontStyle: isTextItalic ? \"italic\" : \"normal\",\n            textDecoration: isTextUnderline ? \"underline\" : \"none\"\n          },\n          className: \"note-input\",\n          type: \"text\",\n          placeholder: \"Enter note...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteApp, \"nA6z0amlXF97trn+oL6gg+ChWbA=\");\n_c = NoteApp;\nexport default NoteApp;\nvar _c;\n$RefreshReg$(_c, \"NoteApp\");","map":{"version":3,"names":["React","useState","useEffect","useRef","RightBar","LogoSvg","ThrashSvg","Footer","jsxDEV","_jsxDEV","NoteApp","_s","currentDateTime","setCurrentDateTime","Date","notes","setNotes","selectedDataId","setSelectedDataId","textAlignment","setTextAlignment","textColor","setTextColor","fontSize","setFontSize","isTextBold","setIsTextBold","isTextItalic","setIsTextItalic","isTextUnderline","setIsTextUnderline","nextDataId","setNextDataId","noteInputRef","storedNotes","JSON","parse","localStorage","getItem","setItem","stringify","handleNewNoteClick","newNoteContent","current","value","trim","truncatedContent","truncateAndAddEllipsis","newNote","id","now","content","dataId","setAttribute","maxLength","length","slice","handleDivClick","event","target","classList","contains","handleDeleteNote","setNoteContent","updatedNotes","filter","note","newSelectedDataId","console","log","selectedNote","find","formattedDateTime","day","getDate","month","formatMonth","getMonth","year","getFullYear","hours","getHours","toString","padStart","minutes","getMinutes","monthNames","handleTextAlignmentChange","alignment","handleFontSizeChange","size","handleChecklistChange","checklistContent","selectedNoteIndex","findIndex","handleDownloadPDF","noteContent","copyToClipboard","downloadPDF","handleTextBoldToggle","handleTextItalicToggle","handleTextUnderlineToggle","text","navigator","clipboard","writeText","err","error","fileName","htmlContent","blob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","click","revokeObjectURL","className","children","_jsxFileName","lineNumber","columnNumber","onClick","map","prevNote","onTextAlignmentChange","onColorChange","onFontSizeChange","onChecklistChange","onDownloadPDF","onTextBoldToggle","onTextItalicToggle","onTextUnderlineToggle","ref","style","resize","textAlign","color","fontWeight","fontStyle","textDecoration","placeholder","_c","$RefreshReg$"],"sources":["/Users/goktugkarabulut/Documents/veqsy/src/components/note-app.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport RightBar from \"./right-bar\";\nimport LogoSvg from \"./svg/logo\";\nimport ThrashSvg from \"./svg/trash\";\nimport Footer from \"./footer\";\n\nconst NoteApp = () => {\n  const [currentDateTime, setCurrentDateTime] = useState(new Date());\n  const [notes, setNotes] = useState([]);\n  const [selectedDataId, setSelectedDataId] = useState(null);\n  const [textAlignment, setTextAlignment] = useState(\"left\");\n  const [textColor, setTextColor] = useState(\"#dcdcdd\");\n  const [fontSize, setFontSize] = useState(\"Medium\");\n  const [isTextBold, setIsTextBold] = useState(false);\n  const [isTextItalic, setIsTextItalic] = useState(false);\n  const [isTextUnderline, setIsTextUnderline] = useState(false);\n  const [nextDataId, setNextDataId] = useState(1);\n\n  const noteInputRef = useRef(null);\n\n  useEffect(() => {\n    const storedNotes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n    setNotes(storedNotes);\n  }, []); \n  \n  useEffect(() => {\n    localStorage.setItem(\"notes\", JSON.stringify(notes));\n  }, [notes]);\n\n  const handleNewNoteClick = () => {\n    const newNoteContent = noteInputRef.current.value.trim();\n\n    if (newNoteContent !== \"\") {\n      const truncatedContent = truncateAndAddEllipsis(newNoteContent);\n\n      const newNote = {\n        id: Date.now(),\n        content: truncatedContent,\n        dataId: nextDataId,\n      };\n\n      setNotes([newNote, ...notes]);\n      setSelectedDataId(newNote.dataId);\n      localStorage.setItem(\"notes\", JSON.stringify([newNote, ...notes]));\n\n      noteInputRef.current.setAttribute(\"data-id\", newNote.dataId);\n\n      setNextDataId(nextDataId + 1);\n\n      noteInputRef.current.value = \"\";\n    }\n  };\n\n  const truncateAndAddEllipsis = (content, maxLength = 25) => {\n    if (content.length <= maxLength) {\n      return content;\n    } else {\n      return content.slice(0, maxLength - 3) + \"...\";\n    }\n  };\n\n  const handleDivClick = (dataId, event) => {\n    if (event && event.target && event.target.classList.contains(\"trash-btn\")) {\n      handleDeleteNote(dataId);\n    } else {\n      setSelectedDataId(dataId);\n      setNoteContent(dataId);\n    }\n  };\n\n  const handleDeleteNote = (dataId) => {\n    const updatedNotes = notes.filter((note) => note.dataId !== dataId);\n    setNotes(updatedNotes);\n  \nif (selectedDataId === dataId || updatedNotes.length === 1) {\n  const newSelectedDataId = updatedNotes.length > 0 ? updatedNotes[0].dataId : null;\n  setSelectedDataId(newSelectedDataId);\n\n  setNoteContent(newSelectedDataId);\n\n  console.log(\"Deleted DataId:\", dataId);\n  console.log(\"Selected DataId After Deletion:\", newSelectedDataId);\n\n  noteInputRef.current.value = \"\"; \n}\n\n\n  };\n  \n\n  const setNoteContent = (dataId) => {\n    const selectedNote = notes.find((note) => note.dataId === dataId);\n    if (selectedNote) {\n      noteInputRef.current.value = selectedNote.content;\n    } else {\n      // Eğer not bulunamazsa, içeriği sıfırla\n      noteInputRef.current.value = \"\";\n    }\n  };\n\n  const formattedDateTime = () => {\n    const day = currentDateTime.getDate();\n    const month = formatMonth(currentDateTime.getMonth());\n    const year = currentDateTime.getFullYear();\n    const hours = currentDateTime.getHours().toString().padStart(2, \"0\");\n    const minutes = currentDateTime.getMinutes().toString().padStart(2, \"0\");\n\n    return `${day} ${month} ${year} ${hours}:${minutes}`;\n  };\n\n  const formatMonth = (month) => {\n    const monthNames = [\n      \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n      \"July\", \"August\", \"September\", \"October\", \"November\", \"December\",\n    ];\n\n    return monthNames[month];\n  };\n\n  const handleTextAlignmentChange = (alignment) => {\n    setTextAlignment(alignment);\n  };\n\n  const handleFontSizeChange = (size) => {\n    setFontSize(size);\n  };\n\n  const handleChecklistChange = (checklistContent) => {\n    if (selectedDataId !== null) {\n      const updatedNotes = [...notes];\n      const selectedNoteIndex = updatedNotes.findIndex((note) => note.dataId === selectedDataId);\n\n      if (selectedNoteIndex !== -1) {\n        updatedNotes[selectedNoteIndex].content = checklistContent;\n        setNotes(updatedNotes);\n      }\n    }\n\n    setNoteContent(selectedDataId);\n  };\n\n  const handleDownloadPDF = () => {\n    const noteContent = noteInputRef.current.value;\n    copyToClipboard(noteContent);\n    downloadPDF(noteContent, 'note.pdf');\n  };\n\n  const handleTextBoldToggle = () => {\n    setIsTextBold(!isTextBold);\n  };\n\n  const handleTextItalicToggle = () => {\n    setIsTextItalic(!isTextItalic);\n  };\n\n  const handleTextUnderlineToggle = () => {\n    setIsTextUnderline(!isTextUnderline);\n  };\n\n  const copyToClipboard = async (text) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      console.log('Text copied to clipboard');\n    } catch (err) {\n      console.error('Unable to copy text to clipboard', err);\n    }\n  };\n\n  const downloadPDF = (content, fileName) => {\n    const htmlContent = `<html><body><pre>${content}</pre></body></html>`;\n    const blob = new Blob([htmlContent], { type: 'application/pdf' });\n\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(blob);\n    link.download = fileName;\n    link.click();\n\n    URL.revokeObjectURL(link.href);\n  };\n\n  return (\n    <div className=\"note-app-container\">\n      <div className=\"left-content\">\n        <div className=\"veqsy_logo\">\n          <LogoSvg />\n        </div>\n        <button className=\"new-note-btn\" onClick={handleNewNoteClick}>\n          New Note\n        </button>\n        {notes.length > 0 && (\n          <ul className=\"notes-container\">\n           {notes.map((prevNote) => (\n  <li\n    key={prevNote.id}\n    className={`previous-note ${prevNote.dataId === selectedDataId ? \"selected\" : \"\"}`}\n    data-id={prevNote.dataId} // Set data-id for the previous-note div\n    onClick={() => handleDivClick(prevNote.dataId)}\n  >\n    {prevNote.content}\n    <button\n      className=\"trash-btn\"\n      onClick={() => handleDeleteNote(prevNote.dataId)}\n    >\n      <ThrashSvg />\n    </button>\n  </li>\n))}\n\n          </ul>\n        )}\n      </div>\n\n      <div className=\"home-container\">\n        <div className=\"current-date-time-container\">\n          <span>{formattedDateTime()}</span>\n        </div>\n        <RightBar\n          textAlignment={textAlignment}\n          onTextAlignmentChange={handleTextAlignmentChange}\n          onColorChange={setTextColor}\n          onFontSizeChange={handleFontSizeChange}\n          onChecklistChange={handleChecklistChange}\n          onDownloadPDF={handleDownloadPDF}\n          onTextBoldToggle={handleTextBoldToggle}\n          onTextItalicToggle={handleTextItalicToggle}\n          onTextUnderlineToggle={handleTextUnderlineToggle}\n        />\n        <div className=\"note-input-container\">\n          <textarea \n            ref={noteInputRef}\n            data-id={selectedDataId} // Set data-id for the textarea\n            style={{\n              resize: \"none\",\n              textAlign: textAlignment,\n              color: textColor,\n              fontSize: fontSize,\n              fontWeight: isTextBold ? \"bold\" : \"normal\",\n              fontStyle: isTextItalic ? \"italic\" : \"normal\",\n              textDecoration: isTextUnderline ? \"underline\" : \"none\",\n            }}\n            className=\"note-input\"\n            type=\"text\"\n            placeholder=\"Enter note...\"\n          />\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default NoteApp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}